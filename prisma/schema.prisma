generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// **USER MANAGEMENT**
model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  password   String? // Nullable for social sign-in
  role       UserRole     @default(PATIENT)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  provider   AuthProvider @default(EMAIL)
  googleId   String?
  facebookId String?

  profile          Profile?
  appointments     Appointment[]
  billing          Billing[]
  paymentHistories PaymentHistory[]
  sentMessages     Message[]        @relation("Sender")
  receivedMessages Message[]        @relation("Recipient")
  doctorProfile    Doctor?
  patientProfile   Patient?
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  name        String
  dateOfBirth DateTime?
  gender      Gender?
  phoneNumber String?
  address     String?
}

model Patient {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @unique @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  medicalHistory MedicalHistory[]
  appointments   Appointment[]
}

model Doctor {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId       String                 @unique @db.ObjectId
  user         User                   @relation(fields: [userId], references: [id])
  specialty    String
  experience   Int?
  appointments Appointment[]
  availability CalendarAvailability[]
  services     Service[]
}

model MedicalHistory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId String    @db.ObjectId
  patient   Patient   @relation(fields: [patientId], references: [id])
  condition String
  notes     String?
  startDate DateTime
  endDate   DateTime?
}

// **CALENDAR MANAGEMENT**
model CalendarAvailability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId  String   @db.ObjectId
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  date      DateTime
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, date, startTime, endTime]) // Prevent overlapping slots
}

// **SERVICE MANAGEMENT**
model Service {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String // Service name (e.g., "Consultation")
  description        String? // Optional description
  price              Float // Base price for service
  duration           Int // Service duration (in minutes)
  doctorId           String               @db.ObjectId
  doctor             Doctor               @relation(fields: [doctorId], references: [id])
  appointments       Appointment[]
  AppointmentHistory AppointmentHistory[]
}

// **APPOINTMENTS & HISTORY**
model Appointment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  patientId String            @db.ObjectId
  doctorId  String            @db.ObjectId
  serviceId String            @db.ObjectId
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  notes     String? // Optional notes for the appointment

  patient Patient              @relation(fields: [patientId], references: [id])
  doctor  Doctor               @relation(fields: [doctorId], references: [id])
  service Service              @relation(fields: [serviceId], references: [id])
  history AppointmentHistory[]
  User    User?                @relation(fields: [userId], references: [id])
  userId  String?              @db.ObjectId

  @@unique([patientId, doctorId, date, startTime]) // Prevent overlapping appointments
}

model AppointmentHistory {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String            @db.ObjectId
  serviceId     String            @db.ObjectId
  appointment   Appointment       @relation(fields: [appointmentId], references: [id])
  service       Service           @relation(fields: [serviceId], references: [id])
  patientId     String            @db.ObjectId
  doctorId      String            @db.ObjectId
  completedAt   DateTime          @default(now())
  duration      Int // Time spent
  status        AppointmentStatus
  notes         String?
  followUpDate  DateTime?

  @@index([patientId, doctorId, completedAt])
}

// **BILLING & PAYMENTS**
model Billing {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  amount      Float
  currency    String        @default("USD")
  description String // Description for billing
  status      BillingStatus @default(PENDING)
  paymentId   String? // Optional link to PaymentHistory
  externalRef String? // Payment gateway reference ID
  metadata    Json? // Store extra payment details as JSON
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  payments PaymentHistory[]
}

model PaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  billingId     String        @db.ObjectId
  billing       Billing       @relation(fields: [billingId], references: [id])
  paymentDate   DateTime
  amount        Float
  currency      String
  paymentStatus PaymentStatus @default(PENDING)
  gateway       String? // Gateway name (e.g., "Stripe", "PayPal")
  externalRef   String? // Reference ID from gateway
  metadata      Json? // Store additional payment data
  createdAt     DateTime      @default(now())
  User          User          @relation(fields: [userId], references: [id])
}

// **MESSAGING**
model Message {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String        @db.ObjectId
  recipientId String        @db.ObjectId
  sender      User          @relation("Sender", fields: [senderId], references: [id])
  recipient   User          @relation("Recipient", fields: [recipientId], references: [id])
  content     String
  timestamp   DateTime      @default(now())
  status      MessageStatus @default(SENT)
}

// **ENUMS**
enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
}

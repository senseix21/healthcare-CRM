// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  email            String           @unique
  password         String? // Nullable for social sign-in users
  role             UserRole         @default(PATIENT)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  provider         AuthProvider     @default(EMAIL)
  googleId         String?          @unique
  facebookId       String?          @unique
  profile          Profile?
  appointments     Appointment[]
  billing          Billing[]
  paymentHistories PaymentHistory[]
  sentMessages     Message[]        @relation("Sender")
  receivedMessages Message[]        @relation("Recipient")
  Patient          Patient?
  Doctor           Doctor?
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  name        String
  dateOfBirth DateTime?
  gender      Gender?
  phoneNumber String?
  address     String?
}

model Patient {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @unique @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  medicalHistory MedicalHistory[]
  appointments   Appointment[]
  doctorId       String?          @db.ObjectId
  Doctor         Doctor?          @relation(fields: [doctorId], references: [id])
}

model Doctor {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId       String                 @unique @db.ObjectId
  user         User                   @relation(fields: [userId], references: [id])
  specialty    String
  experience   Int?
  appointments Appointment[]
  availability CalendarAvailability[]
  Patient      Patient[]
  Service      Service[]
}

model MedicalHistory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId String    @db.ObjectId
  patient   Patient   @relation(fields: [patientId], references: [id])
  condition String
  notes     String?
  startDate DateTime
  endDate   DateTime?
}

model CalendarAvailability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId  String   @db.ObjectId
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  date      DateTime
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, date, startTime, endTime]) // Ensures unique slots per doctor
}

model Service {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  name         String // Name of the service (e.g., "General Consultation")
  description  String? // Optional description of the service
  price        Float // Price for the service
  duration     Int // Duration of the service in minutes
  doctorId     String               @db.ObjectId // Foreign key to associate with a doctor
  doctor       Doctor               @relation(fields: [doctorId], references: [id])
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  appointments Appointment[]
  histories    AppointmentHistory[]
}

model Appointment {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  patientId String               @db.ObjectId
  doctorId  String               @db.ObjectId
  serviceId String               @db.ObjectId
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus
  patient   Patient              @relation(fields: [patientId], references: [id])
  doctor    Doctor               @relation(fields: [doctorId], references: [id])
  service   Service              @relation(fields: [serviceId], references: [id])
  history   AppointmentHistory[]
  User      User?                @relation(fields: [userId], references: [id])
  userId    String?              @db.ObjectId

  @@unique([patientId, doctorId, date, startTime]) // Ensures no duplicate appointments for the same time
}

model AppointmentHistory {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String            @db.ObjectId
  serviceId     String            @db.ObjectId
  appointment   Appointment       @relation(fields: [appointmentId], references: [id])
  service       Service           @relation(fields: [serviceId], references: [id])
  patientId     String            @db.ObjectId
  doctorId      String            @db.ObjectId
  completedAt   DateTime          @default(now())
  duration      Int
  status        AppointmentStatus
  notes         String?
  followUpDate  DateTime?

  @@index([patientId, doctorId, completedAt], name: "history_patient_doctor_completed_idx")
}

model Billing {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  amount         Float
  currency       String           @default("USD")
  description    String
  status         BillingStatus
  paymentId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PaymentHistory PaymentHistory[]
}

model PaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  billingId     String        @db.ObjectId
  billing       Billing       @relation(fields: [billingId], references: [id])
  paymentDate   DateTime
  amount        Float
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  User          User          @relation(fields: [userId], references: [id])
}

model Message {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String        @db.ObjectId
  recipientId String        @db.ObjectId
  sender      User          @relation("Sender", fields: [senderId], references: [id])
  recipient   User          @relation("Recipient", fields: [recipientId], references: [id])
  content     String
  timestamp   DateTime      @default(now())
  status      MessageStatus
}

// Enums
enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
}
